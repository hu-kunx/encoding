const {
  toUtf16Be,
  toUtf16Be,
  toUtf16Le,
  toUtf32Be,
  toUtf32Le,
  toUtf8
} = require("../lib/unicode.t");

describe("unicode.t", () => {
  test("to-utf8", () => {
    expect(toUtf8(0x0041)).toEqual([0x41]);
    expect(toUtf8(0x7834)).toEqual([0xe7, 0xa0, 0xb4]);
    expect(toUtf8(0x6653)).toEqual([0xe6, 0x99, 0x93]);
    expect(toUtf8(0x2a6a5)).toEqual([0xf0, 0xaa, 0x9a, 0xa5]);
  });
  test("to-utf16-le", () => {
    expect(toUtf16Le(0x0041)).toEqual([0x00, 0x41]);
    expect(toUtf16Le(0x7834)).toEqual([0x78, 0x34]);
    expect(toUtf16Le(0x6653)).toEqual([0x66, 0x53]);
  });
  test("to-utf16-be", () => {
    expect(toUtf16Be(0x0041)).toEqual([0x41, 0x00]);
    expect(toUtf16Be(0x7834)).toEqual([0x34, 0x78]);
    expect(toUtf16Be(0x6653)).toEqual([0x53, 0x66]);
  });
  test("to-utf32-le", () => {
    expect(toUtf32Le(0x0041)).toEqual([0x41, 0x00, 0x00, 0x00]);
    expect(toUtf32Le(0x7834)).toEqual([0x34, 0x78, 0x00, 0x00]);
    expect(toUtf32Le(0x6653)).toEqual([0x53, 0x66, 0x00, 0x00]);
    expect(toUtf32Le(0x2a6a5)).toEqual([0xa5, 0xa6, 0x02, 0x00]);
  });
  test("to-utf32-be", () => {
    expect(toUtf32Be(0x0041)).toEqual([0x00, 0x00, 0x00, 0x41]);
    expect(toUtf32Be(0x7834)).toEqual([0x00, 0x00, 0x78, 0x34]);
    expect(toUtf32Be(0x6653)).toEqual([0x00, 0x00, 0x66, 0x53]);
    expect(toUtf32Be(0x2a6a5)).toEqual([0x00, 0x02, 0xa6, 0xa5]);
  });
});
